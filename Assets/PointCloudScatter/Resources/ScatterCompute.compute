#pragma kernel ScatterKernel

#include "Assets/Shader/Library/Random.cginc"
#include "Assets/Shader/Library/Matrix.cginc"

#include "ScatterTarget.cginc"
#include "ScatterSampler.cginc"
#include "ScatterTransform.cginc"
#include "ScatterFilter.cginc"

struct ScatterPoint
{
    float4x4 transform;
    float3 direction;
    float3 randomize;
};

//Result
AppendStructuredBuffer<ScatterPoint> scatterBuffer;

[numthreads(64, 1, 1)]
void ScatterKernel (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= _FaceCount) return;

    SampleTarget target = GetSurface(id.x); 
    SampleData data = GetSampleData(id.x, target);

    for(int i = 0; i < data.count; i++)
    {
        SampleValue value = GetSampleValue(i, data);

        if(value.mapping.x + value.mapping.y >= 1) continue;

        SampleResult result = GetSampleResult(value, target);

        ApplyTransform(result);

        if(!scatterFilter(result))
        {
            continue;
        }
        
        ScatterPoint scatted;
        scatted.transform = GetMatrix(result);
        scatted.direction = result.direction;
        scatted.randomize = result.randomize;

        scatterBuffer.Append(scatted);
    }
}

