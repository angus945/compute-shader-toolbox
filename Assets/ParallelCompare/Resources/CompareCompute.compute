// Each #kernel tells which function to compile; you can have many kernels

int _CompareCount;
int _CompareStart, _CompareOffset;

#pragma kernel Compare_Float
RWStructuredBuffer<float> compareBuffer_Float;

[numthreads(8, 1, 1)]
void Compare_Float (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= _CompareCount) return;

    int compareStart = id.x * _CompareStart;
    float minCompare_0 = compareBuffer_Float[compareStart + _CompareOffset * 0];
    float minCompare_1 = compareBuffer_Float[compareStart + _CompareOffset * 1];
    float minCompare_2 = compareBuffer_Float[compareStart + _CompareOffset * 2];
    float minCompare_3 = compareBuffer_Float[compareStart + _CompareOffset * 3];

    int checkOffset = _CompareOffset == 1 ? 0 : 1;
    float maxCompare_0 = compareBuffer_Float[compareStart + _CompareOffset * 0 + checkOffset];
    float maxCompare_1 = compareBuffer_Float[compareStart + _CompareOffset * 1 + checkOffset];
    float maxCompare_2 = compareBuffer_Float[compareStart + _CompareOffset * 2 + checkOffset];
    float maxCompare_3 = compareBuffer_Float[compareStart + _CompareOffset * 3 + checkOffset];

    float minValue = minCompare_0;
    minValue = min(minValue, minCompare_1);
    minValue = min(minValue, minCompare_2);
    minValue = min(minValue, minCompare_3);

    float maxValue = maxCompare_0;
    maxValue = max(maxValue, maxCompare_1);
    maxValue = max(maxValue, maxCompare_2);
    maxValue = max(maxValue, maxCompare_3);

    compareBuffer_Float[compareStart + 0] = minValue;
    compareBuffer_Float[compareStart + 1] = maxValue;
}