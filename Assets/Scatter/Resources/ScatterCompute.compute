// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ScatterKernel

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
// RWTexture2D<float4> Result;
StructuredBuffer<int> trianglesBuffer;
StructuredBuffer<float3> verticesBuffer;

AppendStructuredBuffer<float3> scatterBuffer;

float4x4 _TransformMatrix;

int _FaceCount;
float _Density;
float _Seed;

float rnd1To1(float seed)
{
    return frac(sin(dot(float2(seed, sin(seed)), float2(12.9898, 78.233))) * 43758.5453);
}
float2 rnd1To2(float seed)
{
    return float2(rnd1To1(seed), rnd1To1(seed + 1684.413));
}
float rnd2To1(float2 seed)
{
    return frac(sin(dot(seed, float2(12.9898, 78.233))) * 43758.5453);
}
float2 rand2To2(in float2 uv) 
{
    float noiseX = (frac(sin(dot(uv, float2(12.9898,78.233) * 2.0)) * 43758.5453));
    float noiseY = sqrt(1 - noiseX * noiseX);
    return float2(noiseX, noiseY);
}

float3 triangleLerp(float3 a, float3 b, float3 c, float2 t)
{
    if (t.x + t.y > 1)
    {
        t.x = (1 - t.x);
        t.y = (1 - t.y);
    }
    
    float3 abShift = lerp(0, b - a, t.x);
    float3 acShift = lerp(0, c - a, t.y);
    return a + abShift + acShift;
}
float triangleArea(float3 a, float3 b, float3 c)
{
    return (length(a - b) * length(a - c)) / 2;
}

void GetTriangleVertex(int faceIndex, out float3 a, out float3 b, out float3 c)
{
    a = verticesBuffer[trianglesBuffer[faceIndex + 0]];
    b = verticesBuffer[trianglesBuffer[faceIndex + 1]];
    c = verticesBuffer[trianglesBuffer[faceIndex + 2]];

    a = mul(_TransformMatrix, float4(a, 1)).xyz;
    b = mul(_TransformMatrix, float4(b, 1)).xyz;
    c = mul(_TransformMatrix, float4(c, 1)).xyz;
}

[numthreads(640, 1, 1)]
void ScatterKernel (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= _FaceCount) return;

    int faceID = id.x * 3;

    float3 vertA, vertB, vertC;
    GetTriangleVertex(faceID, vertA, vertB, vertC);

    float area = triangleArea(vertA, vertB, vertC);
    int count = max(1, area * _Density);
    
    for(int i = 0; i < count; i++)
    {
        float1 seed = (_Seed + i + faceID);
        float3 position = triangleLerp(vertA, vertB, vertC, rnd1To2(seed));
        scatterBuffer.Append(position);
    }
}

